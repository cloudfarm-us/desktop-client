name: release

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: 'bash'

jobs:
  draft:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.build-version }}

    steps:
      - name: Checkout git rpo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Get last git tag
        id: tag
        run: echo "::set-output name=last-tag::$(git describe --tags --abbrev=0 || git rev-list --max-parents=0 ${{github.ref}})"

      - name: Get version from package.json
        id: version
        run: echo "::set-output name=build-version::$(node -e "try{console.log(require('./package.json').version)}catch(e){console.error(e);process.exit(1)}")"

      - name: Delete outdated drafts
        uses: hugo19941994/delete-draft-releases@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          draft: true
          tag_name: v${{ steps.version.outputs.build-version }}
          name: v${{ steps.version.outputs.build-version }}
          


  release:
    needs: [draft]

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: install node.js, npm, yarn
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::./.yarn/cache"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          VITE_APP_VERSION: ${{ needs.draft.outputs.version }}
        with:
          build_script_name: ci
          # args for electron builder
          args: --config build.config.json
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # Base64-encoded code signing certificate for Windows
          windows_certs: ${{ secrets.CSC_LINK }}

          # Password for decrypting `windows_certs`
          windows_certs_password: ${{ secrets.CSC_KEY_PASSWORD }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}